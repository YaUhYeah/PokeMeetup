// LWJGL3 build.gradle

buildscript {
  repositories {
    gradlePluginPortal()
    mavenCentral()
  }
  dependencies {
    if (enableGraalNative == 'true') {
      classpath "org.graalvm.buildtools.native:org.graalvm.buildtools.native.gradle.plugin:0.9.28"
    }
  }
}

plugins {
  id "io.github.fourlastor.construo" version "1.4.1"
  id "application"
  id 'java'
  id 'distribution'
}

sourceSets.main.resources.srcDirs += [ rootProject.file('assets').path ]

mainClassName = 'io.github.pokemeetup.lwjgl3.Lwjgl3Launcher'
application.setMainClass(mainClassName)
java.sourceCompatibility = 8
java.targetCompatibility = 8

if (JavaVersion.current().isJava9Compatible()) {
  compileJava.options.release.set(8)
}

configurations {
  serverImplementation
}

dependencies {
  implementation "com.badlogicgames.gdx-controllers:gdx-controllers-desktop:$gdxControllersVersion"
  implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
  implementation "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
  implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"

  implementation project(':core')

  if (enableGraalNative == 'true') {
    implementation "io.github.berstanio:gdx-svmhelper-backend-lwjgl3:$graalHelperVersion"
    implementation "io.github.berstanio:gdx-svmhelper-extension-box2d:$graalHelperVersion"
  }

  // Server dependencies
  serverImplementation project(':core')
  serverImplementation "com.google.code.gson:gson:2.8.9"
  serverImplementation "com.h2database:h2:2.1.214"
}

def os = System.properties['os.name'].toLowerCase()

run {
  workingDir = rootProject.file('assets').path
  setIgnoreExitValue(true)

  if (os.contains('mac')) {
    jvmArgs += "-XstartOnFirstThread"
  }
}
// Add/update these tasks in your build.gradle

tasks.register('buildCore', GradleBuild) {
  group = 'build'
  description = 'Builds the core project'

  dir = project(':core').projectDir
  tasks = ['jar']
}

tasks.register('serverJar', Jar) {
  group = 'build'
  description = 'Creates the server JAR'

  // Make sure core is built first
  dependsOn buildCore

  archiveFileName = 'server.jar'
  destinationDirectory = file("${buildDir}/server")

  duplicatesStrategy = DuplicatesStrategy.EXCLUDE

  manifest {
    attributes(
      'Main-Class': 'io.github.pokemeetup.server.deployment.ServerLauncher',
      'Implementation-Title': 'Pokemon Meetup Server',
      'Implementation-Version': project.version
    )
  }

  // Include the core project's compiled classes directly
  from project(':core').sourceSets.main.output
  from sourceSets.main.output

  // Include runtime dependencies
  from {
    configurations.runtimeClasspath.collect {
      if (it.isDirectory()) {
        it
      } else {
        zipTree(it).matching {
          // Don't include signature files from dependencies
          exclude 'META-INF/*.SF'
          exclude 'META-INF/*.DSA'
          exclude 'META-INF/*.RSA'
          exclude 'META-INF/MANIFEST.MF'
        }
      }
    }
  }
}

tasks.register('deployServer', Copy) {
  group = 'deployment'
  description = 'Creates a complete server deployment'

  dependsOn serverJar

  from("${buildDir}/server/server.jar")
  into("${buildDir}/deploy")

  doLast {
    def deployDir = file("${buildDir}/deploy")

    // Create start scripts
    new File(deployDir, 'start.bat').text = '''@echo off
java -Xms1G -Xmx4G -jar server.jar
pause
'''

    def shFile = new File(deployDir, 'start.sh')
    shFile.text = '''#!/bin/bash
java -Xms1G -Xmx4G -jar server.jar
'''
    shFile.setExecutable(true, false)

    // Create needed directories
    file("${buildDir}/deploy/logs").mkdirs()
    file("${buildDir}/deploy/plugins").mkdirs()
    file("${buildDir}/deploy/worlds").mkdirs()
    file("${buildDir}/deploy/config").mkdirs()

    println """
        Server deployed to: ${buildDir}/deploy
        To start the server:
        - Windows: Run start.bat
        - Linux/Mac: Run ./start.sh
        """
  }
}

jar {
  archiveFileName = "${appName}-${projectVersion}.jar"
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE

  from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }

  manifest {
    attributes 'Main-Class': project.mainClassName
  }

  exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')

  doLast {
    archiveFile.get().asFile.setExecutable(true, false)
  }
}

tasks.register('dist') {
  dependsOn 'jar'
}

if (enableGraalNative == 'true') {
  apply from: file("nativeimage.gradle")
}
